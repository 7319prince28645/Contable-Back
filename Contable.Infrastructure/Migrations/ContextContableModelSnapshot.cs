// <auto-generated />
using System;
using Contable.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Contable.Infrastructure.Migrations
{
    [DbContext(typeof(ContextContable))]
    partial class ContextContableModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Contable.Domain.Enterprise.Enterprises", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContactsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DateTaxReturnsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeesCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Planilla")
                        .HasColumnType("bit");

                    b.Property<string>("Ruc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StatementsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransactionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContactsId");

                    b.HasIndex("DateTaxReturnsId");

                    b.HasIndex("EmployeesCompanyId");

                    b.HasIndex("PaymentsId");

                    b.HasIndex("StatementsId");

                    b.HasIndex("TasksId");

                    b.HasIndex("TransactionsId");

                    b.ToTable("Enterprises");
                });

            modelBuilder.Entity("Contable.Domain.Enterprise.Entities.Adrress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EnterprisesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EnterprisesId")
                        .IsUnique();

                    b.ToTable("Adrress");
                });

            modelBuilder.Entity("Contable.Domain.Enterprise.Entities.Contacts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Contable.Domain.Enterprise.Entities.EmployeesCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberDocument")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResignationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmployeesCompany");
                });

            modelBuilder.Entity("Contable.Domain.Enterprise.Entities.Regime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnterprisesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("PercentageMonth")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("EnterprisesId")
                        .IsUnique();

                    b.ToTable("Regime");
                });

            modelBuilder.Entity("Contable.Domain.Task.Tasks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTerminated")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TransactionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TransactionsId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Contable.Domain.User.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateBeginning")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEndEnterprise")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePlanilla")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PaymentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Planilla")
                        .HasColumnType("bit");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<Guid?>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransactionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PaymentsId");

                    b.HasIndex("TasksId");

                    b.HasIndex("TransactionsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.DateTaxReturn.DateTaxReturns", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DigitRuc")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DateTaxReturns");
                });

            modelBuilder.Entity("Domain.ExchangeRate.ExchangeRates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BuyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SellRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("Domain.Payment.Payments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("MissingAmount")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Statement.Statements", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateStatement")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DateTaxReturnsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransactionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DateTaxReturnsId")
                        .IsUnique()
                        .HasFilter("[DateTaxReturnsId] IS NOT NULL");

                    b.HasIndex("TransactionsId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("Domain.Transaction.Transactions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTerminated")
                        .HasColumnType("bit");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReemSales")
                        .HasColumnType("bit");

                    b.Property<int>("TransactionName")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("EnterprisesUsers", b =>
                {
                    b.Property<Guid>("EnterprisesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EnterprisesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("EnterprisesUsers");
                });

            modelBuilder.Entity("Contable.Domain.Enterprise.Enterprises", b =>
                {
                    b.HasOne("Contable.Domain.Enterprise.Entities.Contacts", "Contacts")
                        .WithMany()
                        .HasForeignKey("ContactsId");

                    b.HasOne("Domain.DateTaxReturn.DateTaxReturns", "DateTaxReturns")
                        .WithMany()
                        .HasForeignKey("DateTaxReturnsId");

                    b.HasOne("Contable.Domain.Enterprise.Entities.EmployeesCompany", "EmployeesCompany")
                        .WithMany()
                        .HasForeignKey("EmployeesCompanyId");

                    b.HasOne("Domain.Payment.Payments", "Payments")
                        .WithMany()
                        .HasForeignKey("PaymentsId");

                    b.HasOne("Domain.Statement.Statements", "Statements")
                        .WithMany()
                        .HasForeignKey("StatementsId");

                    b.HasOne("Contable.Domain.Task.Tasks", "Tasks")
                        .WithMany()
                        .HasForeignKey("TasksId");

                    b.HasOne("Domain.Transaction.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionsId");

                    b.Navigation("Contacts");

                    b.Navigation("DateTaxReturns");

                    b.Navigation("EmployeesCompany");

                    b.Navigation("Payments");

                    b.Navigation("Statements");

                    b.Navigation("Tasks");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Contable.Domain.Enterprise.Entities.Adrress", b =>
                {
                    b.HasOne("Contable.Domain.Enterprise.Enterprises", null)
                        .WithOne("Address")
                        .HasForeignKey("Contable.Domain.Enterprise.Entities.Adrress", "EnterprisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Domain.Enterprise.Entities.Regime", b =>
                {
                    b.HasOne("Contable.Domain.Enterprise.Enterprises", null)
                        .WithOne("Regime")
                        .HasForeignKey("Contable.Domain.Enterprise.Entities.Regime", "EnterprisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Domain.Task.Tasks", b =>
                {
                    b.HasOne("Domain.Transaction.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionsId");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Contable.Domain.User.Users", b =>
                {
                    b.HasOne("Domain.Payment.Payments", "Payments")
                        .WithMany()
                        .HasForeignKey("PaymentsId");

                    b.HasOne("Contable.Domain.Task.Tasks", "Tasks")
                        .WithMany()
                        .HasForeignKey("TasksId");

                    b.HasOne("Domain.Transaction.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionsId");

                    b.Navigation("Payments");

                    b.Navigation("Tasks");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Statement.Statements", b =>
                {
                    b.HasOne("Domain.DateTaxReturn.DateTaxReturns", null)
                        .WithOne("Statements")
                        .HasForeignKey("Domain.Statement.Statements", "DateTaxReturnsId");

                    b.HasOne("Domain.Transaction.Transactions", "Transactions")
                        .WithMany()
                        .HasForeignKey("TransactionsId");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EnterprisesUsers", b =>
                {
                    b.HasOne("Contable.Domain.Enterprise.Enterprises", null)
                        .WithMany()
                        .HasForeignKey("EnterprisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contable.Domain.User.Users", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contable.Domain.Enterprise.Enterprises", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Regime");
                });

            modelBuilder.Entity("Domain.DateTaxReturn.DateTaxReturns", b =>
                {
                    b.Navigation("Statements");
                });
#pragma warning restore 612, 618
        }
    }
}
